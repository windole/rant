// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Form basic usage 1`] = `
<ForwardRef
  colon={true}
  footer={
    <div
      style={
        Object {
          "margin": "16px 16px 0",
        }
      }
    >
      <Button
        block={true}
        iconPosition="left"
        nativeType="submit"
        round={true}
        size="normal"
        tag="button"
        type="primary"
      >
        提交
      </Button>
    </div>
  }
  inset={true}
  layout="horizontal"
  showValidateMessage={true}
  validateTrigger="onChange"
>
  <ForwardRef(Form2)
    className="rc-form"
    validateTrigger="onChange"
  >
    <form
      className="rc-form"
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <CellGroup
        border={true}
        inset={true}
      >
        <div
          className="rc-cell-group rc-cell-group--inset"
        >
          <FormItem
            disabled={true}
            intro="确保这是唯一的用户名"
            label="用户名"
            name="username"
            rules={
              Array [
                Object {
                  "message": "请填写用户名",
                  "required": true,
                },
              ]
            }
            tooltip={
              Object {
                "message": "A prime is a natural number greater than 1 that has no positive divisors other than 1 and itself.",
              }
            }
          >
            <WrapperField
              name="username"
              rules={
                Array [
                  Object {
                    "message": "请填写用户名",
                    "required": true,
                  },
                ]
              }
              validateTrigger="onChange"
            >
              <Field2
                fieldContext={
                  Object {
                    "_init": true,
                    "getFieldError": [Function],
                    "getFieldValue": [Function],
                    "getFieldWarning": [Function],
                    "getFieldsError": [Function],
                    "getFieldsValue": [Function],
                    "getInternalHooks": [Function],
                    "isFieldTouched": [Function],
                    "isFieldValidating": [Function],
                    "isFieldsTouched": [Function],
                    "isFieldsValidating": [Function],
                    "resetFields": [Function],
                    "setFieldValue": [Function],
                    "setFields": [Function],
                    "setFieldsValue": [Function],
                    "submit": [Function],
                    "validateFields": [Function],
                    "validateTrigger": "onChange",
                  }
                }
                isListField={false}
                key="_username"
                name={
                  Array [
                    "username",
                  ]
                }
                rules={
                  Array [
                    Object {
                      "message": "请填写用户名",
                      "required": true,
                    },
                  ]
                }
                trigger="onChange"
                validateTrigger="onChange"
                valuePropName="value"
              >
                <FormItemLayout
                  disabled={true}
                  htmlFor="username"
                  intro="确保这是唯一的用户名"
                  isFieldChildren={true}
                  label="用户名"
                  meta={
                    Object {
                      "errors": Array [],
                      "name": Array [
                        "username",
                      ],
                      "touched": false,
                      "validated": false,
                      "validating": false,
                      "warnings": Array [],
                    }
                  }
                  required={true}
                  tooltip={
                    Object {
                      "message": "A prime is a natural number greater than 1 that has no positive divisors other than 1 and itself.",
                    }
                  }
                >
                  <ForwardRef
                    className="rc-form"
                    clearIcon="clear"
                    clearTrigger="focus"
                    colon={true}
                    disabled={true}
                    error={false}
                    errorMessage={null}
                    formatTrigger="onChange"
                    htmlFor="username"
                    id="username"
                    intro="确保这是唯一的用户名"
                    label="用户名"
                    onChange={[Function]}
                    placeholder="请输入用户名"
                    required={true}
                    tooltip={
                      Object {
                        "message": "A prime is a natural number greater than 1 that has no positive divisors other than 1 and itself.",
                      }
                    }
                    validateTrigger="onChange"
                    value=""
                  >
                    <Cell
                      className="rc-field rc-field--disabled rc-form"
                      icon={null}
                      required={true}
                      title={
                        <React.Fragment>
                          用户名
                          :
                          <div
                            className="rc-field__tooltip"
                            onClick={[Function]}
                          >
                            <Icon
                              name="question-o"
                              tag="i"
                            />
                          </div>
                        </React.Fragment>
                      }
                      titleClass="rc-field__label"
                      titleStyle={Object {}}
                      valueClass="rc-field__value"
                    >
                      <div
                        className="rc-cell rc-cell--required rc-field rc-field--disabled rc-form"
                      >
                        <div
                          className="rc-cell__title rc-field__label"
                          style={Object {}}
                        >
                          用户名
                          :
                          <div
                            className="rc-field__tooltip"
                            onClick={[Function]}
                          >
                            <Icon
                              name="question-o"
                              tag="i"
                            >
                              <Badge
                                className="van-icon van-icon-question-o"
                                showZero={true}
                                style={
                                  Object {
                                    "color": undefined,
                                    "fontSize": undefined,
                                  }
                                }
                                tag="i"
                              >
                                <i
                                  className="rc-badge__wrapper van-icon van-icon-question-o"
                                  style={
                                    Object {
                                      "color": undefined,
                                      "fontSize": undefined,
                                    }
                                  }
                                />
                              </Badge>
                            </Icon>
                          </div>
                        </div>
                        <div
                          className="rc-cell__value rc-field__value"
                        >
                          <div
                            className="rc-field__body"
                          >
                            <input
                              className="rc-field__control"
                              disabled={true}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onCompositionEnd={[Function]}
                              onCompositionStart={[Function]}
                              onCompositionUpdate={[Function]}
                              onFocus={[Function]}
                              onKeyPress={[Function]}
                              placeholder="请输入用户名"
                              value=""
                            />
                          </div>
                          <div
                            className="rc-field__intro"
                          >
                            确保这是唯一的用户名
                          </div>
                        </div>
                      </div>
                    </Cell>
                  </ForwardRef>
                </FormItemLayout>
              </Field2>
            </WrapperField>
          </FormItem>
          <FormItem
            className="my-password"
            colon={true}
            label="密码"
            labelAlign="center"
            labelClass="my-label-class"
            labelWidth="100"
            onClick={[MockFunction]}
            rules={
              Array [
                Object {
                  "message": "请填写密码",
                  "required": false,
                },
              ]
            }
          >
            <FormItemLayout
              className="my-password"
              colon={true}
              isFieldChildren={true}
              label="密码"
              labelAlign="center"
              labelClass="my-label-class"
              labelWidth="100"
              onClick={[MockFunction]}
            >
              <ForwardRef
                className="rc-form my-password"
                clearIcon="clear"
                clearTrigger="focus"
                colon={true}
                errorMessage={null}
                formatTrigger="onChange"
                label="密码"
                labelAlign="center"
                labelClass="my-label-class"
                labelWidth="100"
                onClick={[MockFunction]}
                placeholder="请输入密码"
                validateTrigger="onChange"
              >
                <Cell
                  className="rc-field rc-field--label-center rc-form my-password"
                  icon={null}
                  onClick={[MockFunction]}
                  title={
                    <React.Fragment>
                      密码
                      :
                    </React.Fragment>
                  }
                  titleClass="rc-field__label rc-field__label--center my-label-class"
                  titleStyle={
                    Object {
                      "width": "100px",
                    }
                  }
                  valueClass="rc-field__value"
                >
                  <div
                    className="rc-cell rc-field rc-field--label-center rc-form my-password"
                    onClick={[MockFunction]}
                  >
                    <div
                      className="rc-cell__title rc-field__label rc-field__label--center my-label-class"
                      style={
                        Object {
                          "width": "100px",
                        }
                      }
                    >
                      密码
                      :
                    </div>
                    <div
                      className="rc-cell__value rc-field__value"
                    >
                      <div
                        className="rc-field__body"
                      >
                        <input
                          className="rc-field__control"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onCompositionUpdate={[Function]}
                          onFocus={[Function]}
                          onKeyPress={[Function]}
                          placeholder="请输入密码"
                        />
                      </div>
                    </div>
                  </div>
                </Cell>
              </ForwardRef>
            </FormItemLayout>
          </FormItem>
        </div>
      </CellGroup>
      <div
        className="rc-form__footer"
      >
        <div
          style={
            Object {
              "margin": "16px 16px 0",
            }
          }
        >
          <Button
            block={true}
            iconPosition="left"
            nativeType="submit"
            round={true}
            size="normal"
            tag="button"
            type="primary"
          >
            <button
              className="rc-button rc-button--primary rc-button--normal rc-button--block rc-button--round"
              onClick={[Function]}
              style={Object {}}
              type="submit"
            >
              <div
                className="rc-button__content"
              >
                <span
                  className="rc-button__text"
                  key="text"
                >
                  提交
                </span>
              </div>
            </button>
          </Button>
        </div>
      </div>
    </form>
  </ForwardRef(Form2)>
</ForwardRef>
`;

exports[`Form when name props is set without shouldUpdate or dependencies 1`] = `
<ForwardRef
  showValidateMessage={true}
  validateTrigger="onChange"
>
  <ForwardRef(Form2)
    className="rc-form"
    validateTrigger="onChange"
  >
    <form
      className="rc-form"
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <CellGroup
        border={true}
      >
        <div
          className="rc-cell-group rc-hairline--top-bottom"
        >
          <FormItem
            name="name"
          >
            <WrapperField
              name="name"
              validateTrigger="onChange"
            >
              <Field2
                fieldContext={
                  Object {
                    "_init": true,
                    "getFieldError": [Function],
                    "getFieldValue": [Function],
                    "getFieldWarning": [Function],
                    "getFieldsError": [Function],
                    "getFieldsValue": [Function],
                    "getInternalHooks": [Function],
                    "isFieldTouched": [Function],
                    "isFieldValidating": [Function],
                    "isFieldsTouched": [Function],
                    "isFieldsValidating": [Function],
                    "resetFields": [Function],
                    "setFieldValue": [Function],
                    "setFields": [Function],
                    "setFieldsValue": [Function],
                    "submit": [Function],
                    "validateFields": [Function],
                    "validateTrigger": "onChange",
                  }
                }
                isListField={false}
                key="_name"
                name={
                  Array [
                    "name",
                  ]
                }
                trigger="onChange"
                validateTrigger="onChange"
                valuePropName="value"
              >
                <FormItemLayout
                  htmlFor="name"
                  meta={
                    Object {
                      "errors": Array [],
                      "name": Array [
                        "name",
                      ],
                      "touched": false,
                      "validated": false,
                      "validating": false,
                      "warnings": Array [],
                    }
                  }
                  required={false}
                >
                  <ForwardRef
                    className="rc-form"
                    clearIcon="clear"
                    clearTrigger="focus"
                    error={false}
                    errorMessage={null}
                    formatTrigger="onChange"
                    htmlFor="name"
                    required={false}
                    validateTrigger="onChange"
                  >
                    <Cell
                      className="rc-field rc-form"
                      icon={null}
                      required={false}
                      title={null}
                      titleClass="rc-field__label"
                      titleStyle={Object {}}
                      valueClass="rc-field__value"
                    >
                      <div
                        className="rc-cell rc-field rc-form"
                      >
                        <div
                          className="rc-cell__value rc-cell__value--alone rc-field__value"
                        >
                          <div
                            className="rc-field__body"
                          >
                            <input
                              className="rc-field__control"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onCompositionEnd={[Function]}
                              onCompositionStart={[Function]}
                              onCompositionUpdate={[Function]}
                              onFocus={[Function]}
                              onKeyPress={[Function]}
                              placeholder=""
                            />
                          </div>
                        </div>
                      </div>
                    </Cell>
                  </ForwardRef>
                </FormItemLayout>
              </Field2>
            </WrapperField>
          </FormItem>
        </div>
      </CellGroup>
    </form>
  </ForwardRef(Form2)>
</ForwardRef>
`;

exports[`Form when noStyle props is set 1`] = `
<ForwardRef
  showValidateMessage={true}
  validateTrigger="onChange"
>
  <ForwardRef(Form2)
    className="rc-form"
    validateTrigger="onChange"
  >
    <form
      className="rc-form"
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <CellGroup
        border={true}
      >
        <div
          className="rc-cell-group rc-hairline--top-bottom"
        >
          <FormItem
            noStyle={true}
          >
            <ForwardRef
              clearIcon="clear"
              clearTrigger="focus"
              formatTrigger="onChange"
              placeholder="请输入密码"
            >
              <Cell
                className="rc-field"
                icon={null}
                title={null}
                titleClass="rc-field__label"
                titleStyle={Object {}}
                valueClass="rc-field__value"
              >
                <div
                  className="rc-cell rc-field"
                >
                  <div
                    className="rc-cell__value rc-cell__value--alone rc-field__value"
                  >
                    <div
                      className="rc-field__body"
                    >
                      <input
                        className="rc-field__control"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onCompositionEnd={[Function]}
                        onCompositionStart={[Function]}
                        onCompositionUpdate={[Function]}
                        onFocus={[Function]}
                        onKeyPress={[Function]}
                        placeholder="请输入密码"
                      />
                    </div>
                  </div>
                </div>
              </Cell>
            </ForwardRef>
          </FormItem>
        </div>
      </CellGroup>
    </form>
  </ForwardRef(Form2)>
</ForwardRef>
`;

exports[`Form when rules with reqiured props is set 1`] = `
<ForwardRef
  showValidateMessage={true}
  validateTrigger="onChange"
>
  <ForwardRef(Form2)
    className="rc-form"
    validateTrigger="onChange"
  >
    <form
      className="rc-form"
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <CellGroup
        border={true}
      >
        <div
          className="rc-cell-group rc-hairline--top-bottom"
        >
          <FormItem
            rules={
              Array [
                Object {
                  "message": "请输入6位数字",
                  "pattern": /\\\\d\\{6\\}/,
                  "required": true,
                },
              ]
            }
          >
            <FormItemLayout
              isFieldChildren={true}
            >
              <ForwardRef
                className="rc-form"
                clearIcon="clear"
                clearTrigger="focus"
                errorMessage={null}
                formatTrigger="onChange"
                placeholder="请输入密码"
                validateTrigger="onChange"
              >
                <Cell
                  className="rc-field rc-form"
                  icon={null}
                  title={null}
                  titleClass="rc-field__label"
                  titleStyle={Object {}}
                  valueClass="rc-field__value"
                >
                  <div
                    className="rc-cell rc-field rc-form"
                  >
                    <div
                      className="rc-cell__value rc-cell__value--alone rc-field__value"
                    >
                      <div
                        className="rc-field__body"
                      >
                        <input
                          className="rc-field__control"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onCompositionUpdate={[Function]}
                          onFocus={[Function]}
                          onKeyPress={[Function]}
                          placeholder="请输入密码"
                        />
                      </div>
                    </div>
                  </div>
                </Cell>
              </ForwardRef>
            </FormItemLayout>
          </FormItem>
        </div>
      </CellGroup>
    </form>
  </ForwardRef(Form2)>
</ForwardRef>
`;

exports[`Form when rules without reqiured props is set 1`] = `
<ForwardRef
  showValidateMessage={true}
  validateTrigger="onChange"
>
  <ForwardRef(Form2)
    className="rc-form"
    validateTrigger="onChange"
  >
    <form
      className="rc-form"
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <CellGroup
        border={true}
      >
        <div
          className="rc-cell-group rc-hairline--top-bottom"
        >
          <FormItem
            rules={
              Array [
                Object {
                  "message": "请输入6位数字",
                  "pattern": /\\\\d\\{6\\}/,
                },
              ]
            }
          >
            <FormItemLayout
              isFieldChildren={true}
            >
              <ForwardRef
                className="rc-form"
                clearIcon="clear"
                clearTrigger="focus"
                errorMessage={null}
                formatTrigger="onChange"
                placeholder="请输入密码"
                validateTrigger="onChange"
              >
                <Cell
                  className="rc-field rc-form"
                  icon={null}
                  title={null}
                  titleClass="rc-field__label"
                  titleStyle={Object {}}
                  valueClass="rc-field__value"
                >
                  <div
                    className="rc-cell rc-field rc-form"
                  >
                    <div
                      className="rc-cell__value rc-cell__value--alone rc-field__value"
                    >
                      <div
                        className="rc-field__body"
                      >
                        <input
                          className="rc-field__control"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onCompositionUpdate={[Function]}
                          onFocus={[Function]}
                          onKeyPress={[Function]}
                          placeholder="请输入密码"
                        />
                      </div>
                    </div>
                  </div>
                </Cell>
              </ForwardRef>
            </FormItemLayout>
          </FormItem>
        </div>
      </CellGroup>
    </form>
  </ForwardRef(Form2)>
</ForwardRef>
`;

exports[`Form when shouldUpdate and dependencies are not set 1`] = `
<ForwardRef
  showValidateMessage={true}
  validateTrigger="onChange"
>
  <ForwardRef(Form2)
    className="rc-form"
    validateTrigger="onChange"
  >
    <form
      className="rc-form"
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <CellGroup
        border={true}
      >
        <div
          className="rc-cell-group rc-hairline--top-bottom"
        >
          <FormItem>
            <WrapperField
              validateTrigger="onChange"
            >
              <Field2
                fieldContext={
                  Object {
                    "_init": true,
                    "getFieldError": [Function],
                    "getFieldValue": [Function],
                    "getFieldWarning": [Function],
                    "getFieldsError": [Function],
                    "getFieldsValue": [Function],
                    "getInternalHooks": [Function],
                    "isFieldTouched": [Function],
                    "isFieldValidating": [Function],
                    "isFieldsTouched": [Function],
                    "isFieldsValidating": [Function],
                    "resetFields": [Function],
                    "setFieldValue": [Function],
                    "setFields": [Function],
                    "setFieldsValue": [Function],
                    "submit": [Function],
                    "validateFields": [Function],
                    "validateTrigger": "onChange",
                  }
                }
                isListField={false}
                key="_"
                trigger="onChange"
                validateTrigger="onChange"
                valuePropName="value"
              >
                <FormItemLayout
                  htmlFor=""
                  meta={
                    Object {
                      "errors": Array [],
                      "name": Array [],
                      "touched": false,
                      "validated": false,
                      "validating": false,
                      "warnings": Array [],
                    }
                  }
                  required={false}
                >
                  <ForwardRef
                    className="rc-form"
                    clearIcon="clear"
                    clearTrigger="focus"
                    error={false}
                    errorMessage={null}
                    formatTrigger="onChange"
                    htmlFor=""
                    required={false}
                    validateTrigger="onChange"
                  >
                    <Cell
                      className="rc-field rc-form"
                      icon={null}
                      required={false}
                      title={null}
                      titleClass="rc-field__label"
                      titleStyle={Object {}}
                      valueClass="rc-field__value"
                    >
                      <div
                        className="rc-cell rc-field rc-form"
                      >
                        <div
                          className="rc-cell__value rc-cell__value--alone rc-field__value"
                        >
                          <div
                            className="rc-field__body"
                          >
                            <input
                              className="rc-field__control"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onCompositionEnd={[Function]}
                              onCompositionStart={[Function]}
                              onCompositionUpdate={[Function]}
                              onFocus={[Function]}
                              onKeyPress={[Function]}
                              placeholder=""
                            />
                          </div>
                        </div>
                      </div>
                    </Cell>
                  </ForwardRef>
                </FormItemLayout>
              </Field2>
            </WrapperField>
          </FormItem>
        </div>
      </CellGroup>
    </form>
  </ForwardRef(Form2)>
</ForwardRef>
`;

exports[`Form when shouldUpdate props is set 1`] = `
<ForwardRef
  showValidateMessage={true}
  validateTrigger="onChange"
>
  <ForwardRef(Form2)
    className="rc-form"
    validateTrigger="onChange"
  >
    <form
      className="rc-form"
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <CellGroup
        border={true}
      >
        <div
          className="rc-cell-group rc-hairline--top-bottom"
        >
          <FormItem
            shouldUpdate={true}
          >
            <WrapperField
              shouldUpdate={true}
              validateTrigger="onChange"
            >
              <Field2
                fieldContext={
                  Object {
                    "_init": true,
                    "getFieldError": [Function],
                    "getFieldValue": [Function],
                    "getFieldWarning": [Function],
                    "getFieldsError": [Function],
                    "getFieldsValue": [Function],
                    "getInternalHooks": [Function],
                    "isFieldTouched": [Function],
                    "isFieldValidating": [Function],
                    "isFieldsTouched": [Function],
                    "isFieldsValidating": [Function],
                    "resetFields": [Function],
                    "setFieldValue": [Function],
                    "setFields": [Function],
                    "setFieldsValue": [Function],
                    "submit": [Function],
                    "validateFields": [Function],
                    "validateTrigger": "onChange",
                  }
                }
                isListField={false}
                key="_"
                shouldUpdate={true}
                trigger="onChange"
                validateTrigger="onChange"
                valuePropName="value"
              >
                <FormItemLayout
                  htmlFor=""
                  meta={
                    Object {
                      "errors": Array [],
                      "name": Array [],
                      "touched": false,
                      "validated": false,
                      "validating": false,
                      "warnings": Array [],
                    }
                  }
                  required={false}
                >
                  <ForwardRef
                    className="rc-form"
                    clearIcon="clear"
                    clearTrigger="focus"
                    error={false}
                    errorMessage={null}
                    formatTrigger="onChange"
                    htmlFor=""
                    required={false}
                    validateTrigger="onChange"
                  >
                    <Cell
                      className="rc-field rc-form"
                      icon={null}
                      required={false}
                      title={null}
                      titleClass="rc-field__label"
                      titleStyle={Object {}}
                      valueClass="rc-field__value"
                    >
                      <div
                        className="rc-cell rc-field rc-form"
                      >
                        <div
                          className="rc-cell__value rc-cell__value--alone rc-field__value"
                        >
                          <div
                            className="rc-field__body"
                          >
                            <div
                              className="rc-field__control rc-field__control--custom"
                            >
                              <ForwardRef
                                clearIcon="clear"
                                clearTrigger="focus"
                                formatTrigger="onChange"
                                placeholder="请输入密码"
                              >
                                <Cell
                                  className="rc-field"
                                  icon={null}
                                  title={null}
                                  titleClass="rc-field__label"
                                  titleStyle={Object {}}
                                  valueClass="rc-field__value"
                                >
                                  <div
                                    className="rc-cell rc-field"
                                  >
                                    <div
                                      className="rc-cell__value rc-cell__value--alone rc-field__value"
                                    >
                                      <div
                                        className="rc-field__body"
                                      >
                                        <input
                                          className="rc-field__control"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onCompositionEnd={[Function]}
                                          onCompositionStart={[Function]}
                                          onCompositionUpdate={[Function]}
                                          onFocus={[Function]}
                                          onKeyPress={[Function]}
                                          placeholder="请输入密码"
                                        />
                                      </div>
                                    </div>
                                  </div>
                                </Cell>
                              </ForwardRef>
                            </div>
                          </div>
                        </div>
                      </div>
                    </Cell>
                  </ForwardRef>
                </FormItemLayout>
              </Field2>
            </WrapperField>
          </FormItem>
        </div>
      </CellGroup>
    </form>
  </ForwardRef(Form2)>
</ForwardRef>
`;
